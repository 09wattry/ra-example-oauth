{"version":3,"sources":["getProfileFromToken.js","dataProvider.js","authProvider.js","LoginForm.js","LoginPage.js","CustomUserMenu.js","index.js"],"names":["tokenJson","token","JSON","parse","jwt","window","atob","id_token","split","console","log","id","dataProvider","type","resource","params","localStorage","getItem","Promise","resolve","data","profile","getProfileFromToken","name","date","Date","total","apiUri","process","userManager","UserManager","authority","client_id","redirect_uri","response_type","scope","cleanup","history","replaceState","document","title","location","origin","authProvider","a","AUTH_LOGIN","code","state","signinRedirect","stateKey","code_verifier","fetch","method","headers","body","stringify","response","ok","reject","json","setItem","clearStaleState","AUTH_LOGOUT","AUTH_ERROR","includes","removeItem","AUTH_CHECK","now","getTime","exp","mapDispatchToProps","userLogin","userLoginAction","connect","undefined","withStyles","spacing","createStyles","button","width","icon","marginRight","unit","classes","useState","loading","setLoading","useEffect","searchParams","URL","href","get","className","variant","color","onClick","disabled","size","thickness","LoginPage","props","Login","loginForm","MyUserMenuView","fetchProfile","crudGetOne","this","picture","src","height","UserMenu","label","Component","MyUserMenu","profileState","admin","resources","MyAppBar","AppBar","userMenu","CustomUserMenu","ReactDOM","render","Admin","loginPage","appLayout","Layout","appBar","Resource","list","ListGuesser","getElementById"],"mappings":"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","file":"static/js/main.0f60a1e2.chunk.js","sourcesContent":["export default tokenJson => {\n    const token = JSON.parse(tokenJson);\n    const jwt = JSON.parse(window.atob(token.id_token.split('.')[1]));\n    console.log(jwt)\n\n    return { id: 'my-profile', ...jwt }\n}\n","import getProfileFromToken from \"./getProfileFromToken\";\n\nconst dataProvider = (type, resource, params) => {\n    if (resource === 'profile' && type === 'GET_ONE') {\n        const token = window.localStorage.getItem('token');\n\n        if (!token) {\n            return Promise.resolve({ data: null })\n        }\n\n        const profile = getProfileFromToken(token);\n\n        return Promise.resolve({ data: profile })\n    }\n\n    switch (type) {\n        case 'GET_LIST':\n            return { data: [{ id: 'id', name: 'Resource', date: new Date() }], total: 1 };\n        default:\n            return null;\n    }\n}\n\nexport default dataProvider;\n","import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\nimport { UserManager } from 'oidc-client';\n\nimport getProfileFromToken from './getProfileFromToken'\n\nconst issuer = 'https://accounts.google.com/';\nconst clientId = process.env.REACT_APP_CLIENT_ID;\nconst redirectUri = process.env.REACT_APP_REDIRECT_URI;\nconst apiUri = process.env.REACT_APP_API_URL;\n\nconst userManager = new UserManager({\n    authority: issuer,\n    client_id: clientId,\n    redirect_uri: redirectUri,\n    response_type: 'code',\n    scope: 'openid email profile', // Allow to retrieve the email and user name later api side\n});\n\nconst cleanup = () => {\n    // Remove the ?code&state from the URL\n    window.history.replaceState(\n        {},\n        window.document.title,\n        window.location.origin\n    );\n}\n\nconst authProvider = async (type, params = {}) => {\n    if (type === AUTH_LOGIN) {\n        // 1. Redirect to the issuer to ask authentication\n        if (!params.code || !params.state) {\n            userManager.signinRedirect();\n            return; // Do not return anything, the login is still loading\n        }\n\n        // 2. We came back from the issuer with ?code infos in query params\n\n        // oidc-client uses localStorage to keep a temporary state\n        // between the two redirections. But since we need to send it to the API\n        // we have to retrieve it manually\n        const stateKey = `oidc.${params.state}`;\n        const { code_verifier } = JSON.parse(\n            localStorage.getItem(stateKey) || '{}'\n        );\n\n        // Transform the code to a token via the API\n        const response = await fetch(`${apiUri}/code-to-token`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ code: params.code, code_verifier }),\n        });\n\n        if (!response.ok) {\n            cleanup();\n            return Promise.reject();\n        }\n\n        const token = await response.json();\n\n        localStorage.setItem('token', JSON.stringify(token));\n        userManager.clearStaleState();\n        cleanup();\n        return Promise.resolve();\n    }\n\n    if ([AUTH_LOGOUT, AUTH_ERROR].includes(type)) {\n        localStorage.removeItem('token');\n        return Promise.resolve();\n    }\n\n    if (type === AUTH_CHECK) {\n        const token = localStorage.getItem('token');\n\n        if (!token) {\n            return Promise.reject()\n        }\n\n        // This is specific to the Google authentication implementation\n        const jwt = getProfileFromToken(token);\n        const now = new Date();\n\n        return now.getTime() > (jwt.exp * 1000) ? Promise.reject() : Promise.resolve()\n    }\n\n    return Promise.resolve();\n}\n\nexport default authProvider;\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { userLogin as userLoginAction } from 'react-admin';\n\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = ({ spacing }) =>\n    createStyles({\n        button: {\n            width: '100%',\n        },\n        icon: {\n            marginRight: spacing.unit,\n        },\n    });\n\nconst LoginForm = ({ classes, userLogin }) => {\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        const { searchParams } = new URL(window.location.href);\n        const code = searchParams.get('code');\n        const state = searchParams.get('state');\n\n        // If code is present, we came back from the provider\n        if (code && state) {\n            setLoading(true);\n            userLogin({ code, state });\n        }\n    }, [userLogin]);\n\n    const handleLogin = () => {\n        setLoading(true);\n        userLogin(); // Do not provide code, just trigger the redirection\n    };\n\n    return (\n        <div>\n            <CardActions>\n                <Button\n                    className={classes.button}\n                    variant=\"raised\"\n                    type=\"submit\"\n                    color=\"primary\"\n                    onClick={handleLogin}\n                    disabled={loading}\n                >\n                    {loading && (\n                        <CircularProgress\n                            className={classes.icon}\n                            size={18}\n                            thickness={2}\n                        />\n                    )}\n                    Login With Google\n                </Button>\n            </CardActions>\n        </div>\n    );\n}\n\nconst mapDispatchToProps = {\n    userLogin: userLoginAction,\n}\n\nexport default connect(undefined, mapDispatchToProps)(withStyles(styles)(LoginForm));\n","import React from 'react';\nimport { Login } from 'react-admin';\n\nimport LoginForm from './LoginForm';\n\nconst LoginPage = (props) => <Login {...props} loginForm={<LoginForm />} />;\n\nexport default LoginPage;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { crudGetOne, UserMenu } from 'react-admin';\n\n// Custom User Menu\n// @see https://marmelab.com/blog/2019/03/07/react-admin-advanced-recipes-user-profile.html\nclass MyUserMenuView extends Component {\n    componentDidMount() {\n        this.fetchProfile();\n    }\n\n    fetchProfile = () => {\n        this.props.crudGetOne(\n            'profile',\n            'my-profile',\n            '/my-profile',\n            false\n        );\n    };\n\n    render() {\n        const { crudGetOne, profile, ...props } = this.props;\n        console.log('profile', profile)\n\n        const icon = profile && profile.picture ? <img src={profile.picture} width=\"48\" height=\"48\" /> : undefined\n\n        return (\n            <UserMenu label={profile ? profile.name : 'Unknown'} icon={icon} {...props} />\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const resource = 'profile';\n    const id = 'my-profile';\n    const profileState = state.admin.resources[resource];\n\n    return {\n        profile: profileState ? profileState.data[id] : null\n    };\n};\n\nconst MyUserMenu = connect(\n    mapStateToProps,\n    { crudGetOne }\n)(MyUserMenuView);\nexport default MyUserMenu;\n","import './index.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Admin, Resource, ListGuesser, AppBar, Layout } from 'react-admin';\n\nimport dataProvider from './dataProvider';\nimport authProvider from './authProvider';\nimport LoginPage from './LoginPage'\nimport CustomUserMenu from './CustomUserMenu'\n\nconst MyAppBar = props => <AppBar {...props} userMenu={<CustomUserMenu />} />;\nconst MyLayout = props => <Layout {...props} appBar={MyAppBar} />;\n\n\nReactDOM.render(\n    <Admin\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n        loginPage={LoginPage}\n        appLayout={MyLayout}\n    >\n        <Resource name=\"resource\" list={ListGuesser} />\n        <Resource name=\"profile\" />\n    </Admin>,\n    document.getElementById('root'));\n"],"sourceRoot":""}