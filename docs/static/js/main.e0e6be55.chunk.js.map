{"version":3,"sources":["dataProvider.js","authProvider.js","LoginForm.js","LoginPage.js","index.js"],"names":["dataProvider","type","resource","params","data","id","name","date","Date","total","authProvider","a","AUTH_LOGIN","token","localStorage","setItem","JSON","stringify","Promise","resolve","reject","AUTH_LOGOUT","AUTH_ERROR","includes","removeItem","AUTH_CHECK","getItem","hash","URL","window","location","href","substring","split","reduce","acc","directive","key","value","decodeURIComponent","mapDispatchToProps","userLogin","userLoginAction","connect","undefined","withStyles","spacing","createStyles","button","width","icon","marginRight","unit","classes","useState","loading","setLoading","userManager","useRef","UserManager","authority","client_id","process","redirect_uri","response_type","scope","signinRedirect","useCallback","current","useEffect","clearStaleState","handleOpenIdAuthentication","className","variant","color","onClick","disabled","size","thickness","LoginPage","props","Login","loginForm","history","createBrowserHistory","basename","ReactDOM","render","Admin","loginPage","Resource","list","ListGuesser","document","getElementById"],"mappings":"kRASeA,EATM,SAACC,EAAMC,EAAUC,GAClC,OAAQF,GACJ,IAAK,WACD,MAAO,CAAEG,KAAM,CAAC,CAAEC,GAAI,KAAMC,KAAM,WAAYC,KAAM,IAAIC,OAAWC,MAAO,GAC9E,QACI,OAAO,O,oCCmBJC,EAtBG,uCAAG,WAAOT,EAAME,GAAb,SAAAQ,EAAA,yDACbV,IAASW,IADI,oBAETT,EAAOU,MAFE,uBAGTC,aAAaC,QAAQ,QAASC,KAAKC,UAAUd,EAAOU,QAH3C,kBAIFK,QAAQC,WAJN,gCAMFD,QAAQE,UANN,WAUb,CAACC,IAAaC,KAAYC,SAAStB,GAVtB,wBAWba,aAAaU,WAAW,SAXX,kBAYNN,QAAQC,WAZF,WAeblB,IAASwB,IAfI,0CAgBJX,aAAaY,QAAQ,SAAWR,QAAQC,UAAYD,QAAQE,UAhBxD,iCAmBVF,QAAQC,WAnBE,4CAAH,wD,sGCgCVQ,EAAS,IAAIC,IAAIC,OAAOC,SAASC,MAAjCJ,KACFd,EAAQc,EAAqBA,EAT9BK,UAAU,GACVC,MAAM,KACNC,QAAO,SAACC,EAAKC,GAAe,IAAD,EACHA,EAAUH,MAAM,KADb,mBACjBI,EADiB,KACZC,EADY,KAGxB,OADAH,EAAII,mBAAmBF,IAAQE,mBAAmBD,GAC3CH,IACR,IAGoC,KAmErCK,EAAqB,CACvBC,UAAWC,KAGAC,mBAAQC,EAAWJ,EAAnBG,CAAuCE,sBA5FvC,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACXC,uBAAa,CACTC,OAAQ,CACJC,MAAO,QAEXC,KAAM,CACFC,YAAaL,EAAQM,UAsFqBP,EArEpC,SAAC,GAA4B,IAA1BQ,EAAyB,EAAzBA,QAASZ,EAAgB,EAAhBA,UAAgB,EACZa,qBAAWzC,GADC,mBACnC0C,EADmC,KAC1BC,EAD0B,KAGpCC,EAAcC,iBAChB,IAAIC,cAAY,CACZC,UAhCG,+BAiCHC,UAhCKC,2EAiCLC,aAhCQD,wCAiCRE,cAAe,QACfC,MAAO,0BAKTC,EAAiBC,uBACnB,WACQtD,IAGJ2C,GAAW,GACXC,EAAYW,QAAQF,oBAExB,IAkBJ,OAfAG,qBAAU,YAC0B,uCAAG,sBAAA1D,EAAA,yDAE1BE,EAF0B,iDAO/B4B,EAAU,CAAE5B,UACZ4C,EAAYW,QAAQE,kBARW,2CAAH,qDAWhCC,KACD,CAAC9B,IAGA,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CACI+B,UAAWnB,EAAQL,OACnByB,QAAQ,SACRxE,KAAK,SACLyE,MAAM,UACNC,QAAST,EACTU,SAAUrB,GAETA,GACG,kBAAC,IAAD,CACIiB,UAAWnB,EAAQH,KACnB2B,KAAM,GACNC,UAAW,IAZvB,2BCzEDC,EAFG,SAACC,GAAD,OAAW,kBAACC,EAAA,EAAD,iBAAWD,EAAX,CAAkBE,UAAW,kBAAC,EAAD,UCKpDC,EAAUC,YAAqB,CAAEC,SAAUvB,uBAEjDwB,IAASC,OACL,kBAACC,EAAA,EAAD,CACIxF,aAAcA,EACdU,aAAcA,EACd+E,UAAWV,EACXI,QAASA,GAET,kBAACO,EAAA,EAAD,CAAUpF,KAAK,WAAWqF,KAAMC,OAEpCC,SAASC,eAAe,W","file":"static/js/main.e0e6be55.chunk.js","sourcesContent":["const dataProvider = (type, resource, params) => {\n    switch (type) {\n        case 'GET_LIST':\n            return { data: [{ id: 'id', name: 'Resource', date: new Date() }], total: 1 };\n        default:\n            return null;\n    }\n}\n\nexport default dataProvider;\n","import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\n\nconst authProvider = async (type, params) => {\n    if (type === AUTH_LOGIN) {\n        if (params.token) {\n            localStorage.setItem('token', JSON.stringify(params.token));\n            return Promise.resolve();\n        } else {\n            return Promise.reject();\n        }\n    }\n\n    if ([AUTH_LOGOUT, AUTH_ERROR].includes(type)) {\n        localStorage.removeItem('token');\n        return Promise.resolve();\n    }\n\n    if (type === AUTH_CHECK) {\n        return !!localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n    }\n\n    return Promise.resolve();\n}\n\nexport default authProvider;\n","import React, { useRef, useCallback, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { userLogin as userLoginAction } from 'react-admin';\nimport { UserManager } from 'oidc-client';\n\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport CardActions from '@material-ui/core/CardActions';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst issuer = 'https://accounts.google.com/';\nconst clientId = process.env.REACT_APP_CLIENT_ID;\nconst redirectUri = process.env.REACT_APP_REDIRECT_URI;\n\nconst styles = ({ spacing }) =>\n    createStyles({\n        button: {\n            width: '100%',\n        },\n        icon: {\n            marginRight: spacing.unit,\n        },\n    });\n\n\nconst parseFragment = hash => hash\n    .substring(1)\n    .split('&')\n    .reduce((acc, directive) => {\n        const [key, value] = directive.split('=');\n        acc[decodeURIComponent(key)] = decodeURIComponent(value);\n        return acc;\n    }, {});\n\nconst { hash } = new URL(window.location.href);\nconst token = hash ? parseFragment(hash) : null\n\nconst LoginForm = ({ classes, userLogin }) => {\n    const [loading, setLoading] = useState(!!token);\n\n    const userManager = useRef(\n        new UserManager({\n            authority: issuer,\n            client_id: clientId,\n            redirect_uri: redirectUri,\n            response_type: 'token',\n            scope: 'openid email profile', // Allow to retrieve the email and user name later api side\n        })\n    );\n\n    // 1. Redirect to the issuer to ask authentication\n    const signinRedirect = useCallback(\n        () => {\n            if (token) {\n                return;\n            }\n            setLoading(true);\n            userManager.current.signinRedirect();\n        },\n        []\n    );\n\n    useEffect(() => {\n        const handleOpenIdAuthentication = async () => {\n            // 1. If the user isn't redirected from \n            if (!token) {\n                return;\n            }\n\n            // 2. We came back from the issuer with #token infos in query params\n            userLogin({ token });\n            userManager.current.clearStaleState();\n        };\n\n        handleOpenIdAuthentication();\n    }, [userLogin]);\n\n    return (\n        <div>\n            <CardActions>\n                <Button\n                    className={classes.button}\n                    variant=\"raised\"\n                    type=\"submit\"\n                    color=\"primary\"\n                    onClick={signinRedirect}\n                    disabled={loading}\n                >\n                    {loading && (\n                        <CircularProgress\n                            className={classes.icon}\n                            size={18}\n                            thickness={2}\n                        />\n                    )}\n                    Login With Google\n                </Button>\n            </CardActions>\n        </div>\n    );\n}\n\nconst mapDispatchToProps = {\n    userLogin: userLoginAction,\n}\n\nexport default connect(undefined, mapDispatchToProps)(withStyles(styles)(LoginForm));\n","import React from 'react';\nimport { Login } from 'react-admin';\n\nimport LoginForm from './LoginForm';\n\nconst LoginPage = (props) => <Login {...props} loginForm={<LoginForm />} />;\n\nexport default LoginPage;\n","import './index.css'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createBrowserHistory } from 'history';\nimport { Admin, Resource, ListGuesser } from 'react-admin';\n\nimport dataProvider from './dataProvider';\nimport authProvider from './authProvider';\nimport LoginPage from './LoginPage'\n\nconst history = createBrowserHistory({ basename: process.env.REACT_APP_BASENAME });\n\nReactDOM.render(\n    <Admin\n        dataProvider={dataProvider}\n        authProvider={authProvider}\n        loginPage={LoginPage}\n        history={history}\n    >\n        <Resource name=\"resource\" list={ListGuesser} />\n    </Admin>,\n    document.getElementById('root'));\n"],"sourceRoot":""}